events { worker_connections 1024; }

http {
    upstream frontend { server frontend:3000; }
    upstream backend { server backend:8000; }
    upstream mlflow { server mlflow:5000; }

    # Redirect HTTP to HTTPS
    server {
        listen 80;
        server_name neuralripper.com www.neuralripper.com;
        return 301 https://$host$request_uri;
    }

    # HTTPS server
    server {
        listen 443 ssl;
        server_name neuralripper.com www.neuralripper.com;

        ssl_certificate /etc/letsencrypt/live/neuralripper.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/neuralripper.com/privkey.pem;

        # SSL settings
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /api/ {
            proxy_pass http://backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /mlflow/ {
            auth_basic "MLflow Access";
            auth_basic_user_file /etc/nginx/.htpasswd;
            proxy_pass http://mlflow/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}